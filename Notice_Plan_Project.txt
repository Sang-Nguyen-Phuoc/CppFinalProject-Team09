Circular linked list :

struct Node {
    int data;
    Node *pNext;  
};

Node* findX(Node* pFirst, int x) {
    while (!pFirst || pFirst->data == x)
        return pFirst; 
    Node* cur = pFirst->pNext; 
    while (cur != pFirst && cur->data != x)
        cur = cur->pNext; 
    if (cur->data == x)
        return cur;
    
    return nullptr; 
}

Doubly linked list: 

void remove1stX(DNode* &pHead, int x) {
    DNode*  cur =  pHead; 
    while (cur && cur->data != x)
        cur = cur->pNext;
    if (cur) {
        if (cur->pPrev)
            cur->pPrev->pNext = cur->pNext;
        else 
            pHead = pHead->pNext; 
        if (cur->pNext)
            cur->pNext->pPrev = cur->pPrev;
        delete cur;
    }
}

void removeX(DNode* nodeRemoved, int x) {
    nodeRemoved->pPrev->pNext = nodeRemoved->pNext;
    if (nodeRemoved->pNext)
        nodeRemoved->pNext->pPrev = nodeRemoved->pPrev; 
    delete nodeRemoved; 
}

void RemoveAllX(DNode* &pHead, int x) {
    while (pHead && pHead->data == x) {
        remove1stX(pHead, x); 
    }
    
    DNode* cur = pHead; 
    while (cur) {
        if (cur->data == x) {
            DNode* tmp = cur->pNext;
            removeX(cur, x); 
            cur = tmp; 
        }
        else 
            cur = cur->pNext; 
    } 
}